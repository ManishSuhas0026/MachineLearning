# -*- coding: utf-8 -*-
"""ML_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fpja8XvCOm3RS_6eZN8lsIM6Fr0dyfax
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import threading
import time
import warnings
warnings.filterwarnings("ignore")
from mlxtend.frequent_patterns import apriori
from mlxtend.frequent_patterns import fpgrowth

df=pd.read_csv('/content/Groceries_dataset.csv')

df

df.info()

df = df.dropna()

df["itemDescription"] = df["itemDescription"].str.lower()

transactions = df

for i, transaction in enumerate(transactions[:5]):
        print(f"Transaction {i+1}: {transaction}")

transactions = []
for i in range(len(df)):
    transactions.append(list(df.iloc[i, 2:]))

encoded=pd.get_dummies(pd.DataFrame(transactions).stack()).sum(level=0)
transactiondf=(encoded>0).astype(int)

apicompleted=threading.Event()
fpcompleted=threading.Event()

exetime=[0,0]

def runapi():
  stime=time.time()
  apiresults=apriori(transactiondf,min_support=0.02,use_colnames=True)
  exetime[0]=time.time()-stime
  apicompleted.set()

def runfp():
  stime=time.time()
  fpresults=fpgrowth(transactiondf,min_support=0.02,use_colnames=True)
  exetime[1]=time.time()-stime
  fpcompleted.set()

apthread=threading.Thread(target=runapi)
fpthread=threading.Thread(target=runfp)

apthread.start()
fpthread.start()
apicompleted.wait()
fpcompleted.wait()
apthread.join()
fpthread.join()

algorithms=['Apriori-Algorithm','FP-Growth']
plt.bar(algorithms,exetime)
plt.xlabel('Algorithms')
plt.ylabel('Execution Time')
plt.title('Apriori vs FP-Growth')
plt.show()
if exetime[0]<exetime[1]:
  print("Apriori is Faster")
elif exetime[1]<exetime[0]:
  print("FP-Growth is Faster")
else:
  print("Both are equal")

def fp_growth_algorithm(transactions, min_support, min_confidence):
    frequent_itemsets = fpgrowth(transactions, min_support=min_support, use_colnames=True)
    association_rules_fp_growth = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_confidence)
    return frequent_itemsets, association_rules_fp_growth

def apriori_algorithm(transactions, min_support, min_confidence):
    frequent_itemsets = apriori(transactions, min_support=min_support, use_colnames=True)
    association_rules_apriori = association_rules(frequent_itemsets, metric="confidence", min_threshold=min_confidence)
    return frequent_itemsets, association_rules_apriori

def main():

  min_support = 0.01
  min_confidence = 0.5

  transactions = df.groupby('Member_number')['itemDescription'].apply(list).tolist()

  frequent_itemsets_fp_growth, fp_growth_execution_time = fp_growth_algorithm (transactions, min_support, min_confidence).runtime
  frequent_itemsets_apriori, apriori_execution_time = apriori_algorithm(transactions, min_support, min_confidence).runtime

  algorithms = ['FP-growth', 'Apriori']
  execution_times = [fp_growth_execution_time, apriori_execution_time]

  plt.figure(figsize=(8, 6))
  plt.plot(["FP-Growth", "Apriori"], [fp_growth_time, apriori_time])
  plt.xlabel("Algorithm")
  plt.ylabel("Execution Time (seconds)")
  plt.title("Comparison of Execution Times of FP-Growth and Apriori Algorithms")
  plt.legend()
  plt.show()

def main():
    file_path = "Groceries_dataset.csv"
    min_support = 0.01
    min_confidence = 0.5

    transactions = df.groupby('Member_number')['itemDescription'].apply(list).tolist()

    # Run the algorithms and get execution times
    frequent_itemsets_fp_growth, _, fp_growth_execution_time = fp_growth_algorithm(transactions, min_support, min_confidence)
    frequent_itemsets_apriori, _, apriori_execution_time = apriori_algorithm(transactions, min_support, min_confidence)

    # Data for plotting
    algorithms = ['FP-growth', 'Apriori']
    execution_times = [fp_growth_execution_time, apriori_execution_time]

    # Create a bar graph
    plt.bar(algorithms, execution_times, color=['blue', 'green'])
    plt.xlabel('Algorithms')
    plt.ylabel('Execution Time (seconds)')
    plt.title('Execution Time Comparison')
    plt.show()


if __name__ == "__main__":
    main()